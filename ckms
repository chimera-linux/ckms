#!/usr/bin/env python3

import os
import sys
import shlex
import shutil
import fnmatch
import pathlib
import argparse
import traceback
import subprocess
import contextlib
import configparser

kern_path = pathlib.Path("/lib/modules")

# initial values, but after parsing cfg they will be pathlib.Path
opt_statedir = "/var/lib/ckms"
opt_destdir = str(kern_path)

opt_confpath = "/etc/ckms/config.ini"
opt_initramfs = "/etc/ckms/refresh-initramfs.sh"
opt_depmodh = "/etc/ckms/depmod.sh"
opt_stripcmd = "strip -g"
opt_makeargs = ""
opt_makeenv = None
opt_kernver = None
opt_pkgconf = None
opt_quiet = False
opt_depmod = True
opt_machine = None
opt_jobs = None
opt_comp = None

use_colors = True

@contextlib.contextmanager
def redir_allout(logpath):
    try:
        # save old descriptors
        oldout = os.dup(sys.stdout.fileno())
        olderr = os.dup(sys.stderr.fileno())
        if opt_quiet:
            # quiet mode: just get all stdout/stderr into logfile
            logfile = open(logpath, "wb")
            os.dup2(logfile.fileno(), sys.stdout.fileno())
            os.dup2(logfile.fileno(), sys.stderr.fileno())
        else:
            # this will do the logging for us; this way we can get
            # both standard output and file redirection at once
            tee = subprocess.Popen(["tee", logpath], stdin = subprocess.PIPE)
            # everything goes into the pipe
            os.dup2(tee.stdin.fileno(), sys.stdout.fileno())
            os.dup2(tee.stdin.fileno(), sys.stderr.fileno())
        # fire
        yield
    finally:
        # restore
        os.dup2(oldout, sys.stdout.fileno())
        os.dup2(olderr, sys.stderr.fileno())
        if not opt_quiet:
            # close the pipe
            tee.stdin.close()
        else:
            logfile.close()
        # close the old duplicates
        os.close(oldout)
        os.close(olderr)
        if not opt_quiet:
            # wait for the tee to finish
            tee.communicate()

class CkmsError(Exception):
    pass

def log(msg, col = "\033[1m"):
    if use_colors:
        sys.stdout.write(col)
    sys.stdout.write("=> ckms: ")
    sys.stdout.write(msg)
    if use_colors:
        sys.stdout.write("\033[m")
    sys.stdout.write("\n");

def log_red(msg):
    log(msg, "\033[1m\033[31m")

def drop_privs():
    if os.geteuid() != 0:
        return
    # drop privileges to owner of state directory
    st = opt_statedir.stat()
    os.setgid(st.st_gid)
    os.setuid(st.st_uid)

def check_has_action(cmd, drop_priv = True):
    if len(cmd) < 2:
        raise CkmsError("action argument not given")

    if drop_priv:
        drop_privs()

# determine the linux kernel architecture from uname machine
def machine_to_arch(mach):
    if mach.startswith("aarch64"):
        return "arm64"
    elif mach.startswith("arm"):
        return "arm"
    elif mach.startswith("ppc"):
        return "powerpc"
    elif mach.startswith("riscv"):
        return "riscv"
    elif mach.startswith("mips"):
        return "mips"
    elif mach.startswith("s390"):
        return "s390"
    elif mach.startswith("sparc"):
        return "sparc"
    elif mach.startswith("parisc"):
        return "parisc"
    elif mach.startswith("sh"):
        return "sh"
    elif mach.startswith("loongarch"):
        return "loongarch"
    elif fnmatch.fnmatch(mach, "i?86"):
        return "i386"
    else:
        return mach

class Package:
    def __init__(self, name, version, pkgpath, pkgconf, cfgdata):
        self.name = name
        self.version = version
        self.pkgver = f"{name}={version}"
        self.cfgdata = cfgdata
        self.pkgpath = pkgpath
        self.pkgconf = pkgconf
        # whether to strip the modules, true by default
        try:
            self.strip = cfgdata["general"].getboolean(
                "strip", fallback = True
            )
        except ValueError:
            raise CkmsError("invalid value for 'strip'")
        # whether the modules are in initramfs, false by default
        try:
            self.initramfs = cfgdata["general"].getboolean(
                "initramfs", fallback = False
            )
        except ValueError:
            raise CkmsError("invalid value for 'initramfs'")
        # determine make implementation, default to gnu make
        maken = cfgdata["general"].get("make", fallback = "gmake")
        if not shutil.which(maken):
            do_fail = True
            if maken == "gmake":
                try:
                    # check if our regular make is okay enough
                    do_fail = not subprocess.run(
                        ["make", "--version"], capture_output = True
                    ).stdout.startswith(b"GNU Make")
                except Exception:
                    pass
            if do_fail:
                raise CkmsError(f"make not present: {maken}")
            else:
                self.make = "make"
        else:
            self.make = maken
        # default environment
        self.env = {
            "PATH": os.environ["PATH"],
            "MAKE": self.make,
            "SHELL": "/bin/sh",
            "CKMS_PACKAGE_NAME": name,
            "CKMS_PACKAGE_VERSION": version,
            "CKMS_JOBS": str(opt_jobs),
            "CKMS_STATEDIR": str(opt_statedir),
            "CKMS_DESTDIR": str(opt_destdir),
        }
        if opt_depmod:
            self.env["CKMS_DEPMOD"] = "1"
        # save a list of modules
        self.modules = []
        modset = {}
        for sect in cfgdata.sections():
            if not sect.startswith("module."):
                continue
            sh = cfgdata[sect]
            mn = sect.removeprefix("module.")
            if "path" not in sh or "dest" not in sh:
                raise CkmsError(f"malformed module section '{sect}'")
            if mn in modset:
                raise CkmsError(f"duplicate module '{mn}'")
            strip = None
            if "strip" in sh:
                try:
                    strip = sh.getboolean("strip")
                except ValueError:
                    raise CkmsError(f"invalid value for 'strip' for '{mn}'")
            self.modules.append((mn, sh["path"], sh["dest"], strip))
        # make deterministic
        self.modules.sort(key = lambda v: v[0])
        # ensure we have some modules
        if len(self.modules) == 0:
            raise CkmsError(f"'{self.name}' has no kernel modules")

    def ensure_builtins(self, kerndir, kernmach, kernver):
        kernarch = machine_to_arch(kernmach)
        gen = self.cfgdata["general"]
        gen["kernel_hdrdir"] = str(kerndir)
        gen["kernel_machine"] = kernmach
        gen["kernel_version"] = kernver
        gen["kernel_arch"] = kernarch
        # expose for hooks
        self.env["CKMS_KERNEL_HDRDIR"] = str(kerndir)
        self.env["CKMS_KERNEL_VERSION"] = kernver
        self.env["CKMS_KERNEL_MACHINE"] = kernmach
        self.env["CKMS_KERNEL_ARCH"] = kernarch

    def add_cfg_env(self):
        # add extra make args first
        margs = opt_makeargs.strip()
        if len(margs) > 0:
            oargs = self.env["CKMS_MAKE_ARGS"]
            if len(oargs) > 0:
                self.env["CKMS_MAKE_ARGS"] = oargs + " " + margs
            else:
                self.env["CKMS_MAKE_ARGS"]= margs
        # then add custom environment
        if opt_makeenv:
            for optn, optv in opt_makeenv.items():
                self.env[optn] = optv

    def prepare_build_env(self):
        cfg = kern_path / opt_kernver / "build/.config"
        margs = []
        if not cfg.is_file():
            self.env["CKMS_MAKE_ARGS"] = " ".join(margs)
            self.add_cfg_env()
            return
        with open(cfg) as cf:
            for l in cf:
                # we only care about the first category
                if l == "\n":
                    break
                l = l.strip()
                if l == "CONFIG_CC_IS_CLANG=y":
                    margs.append("LLVM=1")
                    self.env["LLVM"] = "1"
                elif l == "CONFIG_LD_IS_BFD=y":
                    margs.append("LD=ld.bfd")
                    self.env["LD"] = "ld.bfd"
                elif l == "CONFIG_LD_IS_LLD=y":
                    margs.append("LD=ld.lld")
                    self.env["LD"] = "ld.lld"
                elif l == "CONFIG_AS_IS_GNU=y":
                    margs.append("LLVM_IAS=0")
                    self.env["LLVM_IAS"] = "0"
        # ensure LLVM_IAS is set to something
        if "LLVM_IAS" not in self.env and "LLVM" in self.env:
            margs.append("LLVM_IAS=1")
            self.env["LLVM_IAS"] = "1"
        # expose extra make args
        self.env["CKMS_MAKE_ARGS"] = " ".join(margs)
        # add stuff from global config
        self.add_cfg_env()

    def shell(self, s, cwd = None):
        if not cwd:
            cwd = self.pkgpath / "build"
        return subprocess.run(
            s, shell = True, cwd = cwd, env = self.env
        )

    def do(self, cmd, *args, cwd = None, env = None, sys_env = False):
        if not cwd:
            cwd = self.pkgpath / "build"
        if not env:
            env = self.env
        if sys_env:
            benv = dict(os.environ)
            benv.update(env)
        else:
            benv = env
        return subprocess.run([cmd, *args], cwd = cwd, env = benv)

    def run_hook(self, hookn):
        if "hooks" not in self.cfgdata:
            return False
        if hookn not in self.cfgdata["hooks"]:
            return False
        (self.pkgpath / "logs").mkdir(exist_ok = True, parents = True)
        # redirect output into logfile as necessary
        with redir_allout(self.pkgpath / f"logs/{hookn}.log"):
            pret = self.shell(self.cfgdata["hooks"][hookn])
        if pret.returncode != 0:
            raise CkmsError(
                f"hook '{hookn}' failed with code {pret.returncode}"
            )
        return True

def get_pkgpath(namever, guess_ver):
    eq = namever.find("=")

    if eq < 0:
        if guess_ver and namever.find("/") < 0:
            gp = opt_statedir / namever / f"kernel-{opt_kernver}-{opt_machine}"
            if gp.is_symlink():
                # go down to version
                gp = gp.resolve().parent.parent
                if gp.parent.name == namever:
                    # we've resolved it
                    namever = gp
        # follow the regular logic from here
        p = pathlib.Path(namever)
        if p.is_dir() and p.parent.parent == opt_statedir:
            return p
        raise CkmsError(f"'{namever}' does not match format 'name=version'")

    name = namever[0:eq]
    ver = namever[eq + 1:]

    if len(name) == 0 or len(ver) == 0:
        raise CkmsError(f"'{namever}' does not match format 'name=version'")

    return opt_statedir / name / ver

def read_package(pkgpath, by_name = False, check_source = True, guess_ver = False):
    if by_name:
        pkgpath = get_pkgpath(pkgpath, guess_ver)
    else:
        pkgpath = pathlib.Path(pkgpath).resolve()

    try:
        if not pkgpath.is_dir():
            raise CkmsError(f"package path '{pkgpath}' does not exist")
    except PermissionError:
        raise CkmsError(f"no permissions to read package path '{pkgpath}'")

    if check_source and by_name:
        srcp = pkgpath / "source"
        if not srcp.is_dir():
            raise CkmsError(f"package source in '{pkgpath}' does not exist")

    pkgconf = opt_pkgconf
    if not pkgconf:
        pkgconf = pkgpath / "ckms.ini"

    pkgconf = pathlib.Path(pkgconf)

    if not pkgconf.is_file():
        raise CkmsError(f"package config file not found for '{pkgpath}'")

    mcfg = configparser.ConfigParser(default_section = "general")
    mcfg.read(pkgconf)

    if "general" not in mcfg:
        raise CkmsError(f"general section missing for '{pkgconf}'")

    gen = mcfg["general"]

    if "name" not in gen:
        raise CkmsError(f"package name unknown for '{pkgconf}'")
    if "version" not in gen:
        raise CkmsError(f"package version unknown for '{pkgconf}'")

    gen["ckms_statedir"] = str(opt_statedir)
    gen["ckms_destdir"] = str(opt_destdir)

    pnm = gen["name"]
    pvr = gen["version"]

    if check_source and by_name:
        cdp = kern_path / opt_kernver / "ckms-disable"
        if (cdp / pnm / pvr).is_file():
            raise CkmsError(
                f"package '{pnm}={pvr}' disabled for kernel '{opt_kernver}'"
            )

    return Package(pnm, pvr, pkgpath, pkgconf, mcfg)

def do_add(cmd):
    check_has_action(cmd)

    pkg = read_package(cmd[1])

    # create package directory
    dbpath = opt_statedir / pkg.name / pkg.version
    slpath = dbpath / "source"
    dbpath.mkdir(parents = True, exist_ok = True)
    # ensure it's not already added
    if slpath.is_dir() or (dbpath / "ckms.ini").is_file():
        raise CkmsError(f"{pkg.pkgver} is already added")
    # create source symlink
    if slpath.exists() and not slpath.is_symlink():
        raise CkmsError(f"'{slpath}' exists but is not a symlink")
    slpath.symlink_to(pkg.pkgpath)
    # install ckms.ini
    shutil.copy(pkg.pkgconf, dbpath)

    log(f"added {pkg.pkgver}")

def do_remove(cmd):
    check_has_action(cmd)

    pkg = read_package(cmd[1], True, False)

    can_rm = True

    for f in pkg.pkgpath.iterdir():
        if f.name == "source" or f.name == "build" or f.name == "ckms.ini":
            continue
        log(f"{cmd[1]} still built for '{f.name}'")
        can_rm = False

    if not can_rm:
        raise CkmsError(f"'{pkg.pkgpath}' has built modules")

    (pkg.pkgpath / "source").unlink(missing_ok = True)
    (pkg.pkgpath / "ckms.ini").unlink(missing_ok = True)

    if (pkg.pkgpath / "build").is_dir():
        shutil.rmtree(pkg.pkgpath / "build")

    pkg.pkgpath.rmdir()

    log(f"removed {pkg.pkgver}")

def do_clean(cmd):
    check_has_action(cmd)

    pkg = read_package(cmd[1], True, False)

    kpath = pkg.pkgpath / opt_kernver

    if not kpath.is_dir():
        raise CkmsError(f"{pkg.pkgver} not built for {opt_kernver}")

    shutil.rmtree(kpath)

    log(f"cleaned {pkg.pkgver} for {opt_kernver}")

def get_compsfx():
    if opt_comp:
        return f".{opt_comp}"
    # figure out whether to compress modules
    for f in sorted((kern_path / opt_kernver).rglob("*.ko*")):
        if f.suffix in [".gz", ".xz", ".zst"]:
            compsfx = f.suffix
            break

    return compsfx

def do_build(cmd, quiet = False):
    check_has_action(cmd)

    pkg = read_package(cmd[1], True)

    kernhdrs = kern_path / opt_kernver / "build"

    if not kernhdrs.is_dir():
        raise CkmsError(f"kernel headers not installed in '{kernhdrs}'")

    pkg.ensure_builtins(kernhdrs, opt_machine, opt_kernver)
    pkg.prepare_build_env()

    bpath = pkg.pkgpath / opt_kernver / opt_machine
    if bpath.is_dir():
        if not quiet:
            log(f"found built tree for {pkg.pkgver}")
        return

    log("preparing build...")

    bdir = pkg.pkgpath / "build"
    if not bdir.is_dir():
        shutil.copytree(pkg.pkgpath / "source", pkg.pkgpath / "build")

    log("configuring...")

    pkg.run_hook("configure")

    log("building...")

    pkg.run_hook("pre_build")

    if not pkg.run_hook("build"):
        # default behavior
        raise CkmsError("default build hook not yet supported")

    mdestb = bpath / "module"
    if mdestb.is_dir():
        shutil.rmtree(mdestb)
    mdestb.mkdir(parents = True, exist_ok = True)

    pkg.run_hook("post_build")

    log("registering...")

    for modn, mpath, mdest, dostrip in pkg.modules:
        log(f"registering kernel module '{modn}'")
        modf = bdir / mpath / f"{modn}.ko"
        destf = bpath / mpath
        if not modf.is_file():
            raise CkmsError(f"kernel module '{modn}' does not exist")
        # strip first
        if dostrip or (pkg.strip and dostrip != False):
            if pkg.do(
                *shlex.split(opt_stripcmd), modf, sys_env = True
            ).returncode != 0:
                raise CkmsError(f"strip failed for '{modf}'")
        # then copy
        destf.mkdir(parents = True, exist_ok = True)
        shutil.copy(modf, destf)
        (destf / f"{modn}.ko").chmod(0o644)

    # clean build dir
    shutil.rmtree(bdir)

    # move logs dir into kernel-specific dir
    if (pkg.pkgpath / "logs").is_dir():
        shutil.move(pkg.pkgpath / "logs", bpath)

    log(f"built {pkg.pkgver} for {opt_kernver}/{opt_machine}")

def do_depmod(pkg):
    rdest = opt_destdir.resolve()
    kdest = pathlib.Path("/lib/modules").resolve()

    if opt_depmod and rdest == kdest:
        # if depmod hook is present, use it instead
        if pathlib.Path(opt_depmodh).is_file():
            if pkg.do(
                opt_depmodh, opt_kernver, cwd = rdest, env = dict(os.environ)
            ).returncode != 0:
                raise CkmsError(f"depmod hook failed for {opt_kernver}")
            return True
        # if not, use builtin behavior
        dargs = ["-a"]
        smap = pathlib.Path(f"/boot/System.map-{opt_kernver}")
        if smap.is_file():
            dargs += ["-F", smap]
        if pkg.do("depmod", *dargs, opt_kernver, cwd = rdest).returncode != 0:
            raise CkmsError(f"depmod failed for {opt_kernver}")
        return True

    return False

def do_initramfs(pkg):
    if not pkg.initramfs:
        return

    rdest = opt_destdir.resolve()

    if pathlib.Path(opt_initramfs).is_file():
        if pkg.do(
            opt_initramfs, opt_kernver, cwd = rdest, env = dict(os.environ)
        ).returncode != 0:
            log_red(f"ERROR: failed to update initramfs for {opt_kernver}")
            log("You might have to refresh it manually.")

def do_install(cmd):
    check_has_action(cmd, False)

    pkg = read_package(cmd[1], True)

    kernhdrs = kern_path / opt_kernver / "build"

    pkg.ensure_builtins(kernhdrs, opt_machine, opt_kernver)

    bpath = pkg.pkgpath / opt_kernver / opt_machine
    if not bpath.is_dir():
        raise CkmsError(f"package {pkg.pkgver} is not built")

    slinkn = f"kernel-{opt_kernver}-{opt_machine}"
    slinkd = f"{pkg.version}/{opt_kernver}/{opt_machine}"
    slinkp = pkg.pkgpath.parent / slinkn

    if slinkp.is_symlink():
        log(f"'{pkg.pkgver}' already installed for {opt_kernver}")
        return

    log(f"installing {pkg.pkgver} for {opt_kernver}/{opt_machine}")

    csfx = get_compsfx()

    for modn, mpath, mdest, dostrip in pkg.modules:
        spath = bpath / mpath
        dpath = opt_destdir / opt_kernver / mdest
        modf = f"{modn}.ko"
        # clean up
        dpath.mkdir(exist_ok = True, parents = True)
        # remove modules, potentially compressed
        for f in dpath.glob(f"{modn}.ko*"):
            f.unlink()
        # copy the file, validate just in case
        if not (spath / modf).exists():
            raise CkmsError(f"module '{modf}' does not exist")
        shutil.copy(spath / modf, dpath)
        # compress
        if csfx == ".gz":
            compret = pkg.do("gzip", "-9f", modf, cwd = dpath).returncode
        elif csfx == ".xz":
            compret = pkg.do("xz", "-f", modf, cwd = dpath).returncode
        elif csfx == ".zst":
            compret = pkg.do(
                "zstd", "-q", "-f", "-T0", "--rm",
                modf, cwd = dpath
            ).returncode
        else:
            compret = 0
        # ensure this worked
        if compret != 0:
            raise CkmsError(f"module compression failed for '{modf}'")

    if do_depmod(pkg):
        do_initramfs(pkg)

    slinkp.symlink_to(slinkd)

    log(f"installed {pkg.pkgver} for {opt_kernver}/{opt_machine}")

def do_uninstall(cmd):
    check_has_action(cmd, False)

    kernpath = opt_destdir / opt_kernver

    pkg = read_package(cmd[1], True, False, True)

    kernhdrs = kern_path / opt_kernver / "build"

    pkg.ensure_builtins(kernhdrs, opt_machine, opt_kernver)

    slinkn = f"kernel-{opt_kernver}-{opt_machine}"
    slinkp = pkg.pkgpath.parent / slinkn

    slinkr = slinkp.resolve()
    # installed module does not match this...
    if slinkr.is_dir() and slinkr.parent.parent.name != pkg.pkgver:
        return

    slinkp.unlink(missing_ok = True)

    # not installed
    if not (pkg.pkgpath / opt_kernver).is_dir():
        return

    for modn, mpath, mdest, dostrip in pkg.modules:
        dpath = kernpath / mdest
        if not dpath.is_dir():
            continue
        # remove modules, potentially compressed
        for f in dpath.glob(f"{modn}.ko*"):
            f.unlink()
        # try removing empty
        try:
            while dpath.is_relative_to(opt_destdir):
                os.rmdir(dpath)
                dpath = dpath.parent
        except OSError:
            # stop at first non-empty
            pass

    # only do this if the kernel still exists
    if (kernpath / "modules.order").is_file() and do_depmod(pkg):
        do_initramfs(pkg)

    log(f"uninstalled {pkg.pkgver} for {opt_kernver}")

def do_status(cmd, pretty = True):
    if len(cmd) < 2:
        package = None
    else:
        package = cmd[1]

    pkgver = None

    if package:
        eq = package.find("=")
        if eq > 0:
            pkgver = package[eq + 1:]
            package = package[0:eq]

    # just in case
    drop_privs()

    for f in opt_statedir.iterdir():
        # just skip over junk
        if not f.is_dir():
            continue
        pkgname = f.name
        # specific package was given
        if package and pkgname != package:
            continue
        # otherwise loop for versions
        for v in f.iterdir():
            # ditto
            if not v.is_dir():
                continue
            version = v.name
            # specfic package version was given
            if pkgver and version != pkgver:
                continue
            # baseline state
            state = "added"
            if (v / opt_kernver / opt_machine).is_dir():
                # built or better
                state = "built"
                # check if it's installed too
                if (f / f"kernel-{opt_kernver}-{opt_machine}").is_symlink():
                    state = "installed"
            elif not (v / "source").is_dir():
                # if not built and source does not exist, exclude from status
                continue
            # handle disabled packages
            cdp = kern_path / opt_kernver / "ckms-disable"
            if (cdp / pkgname / version).is_file():
                if state == "added":
                    state = "disabled"
                elif state == "built":
                    # special case
                    state = f"built+disabled"
            # print whatever state we got
            if pretty:
                print(f"{pkgname}, {version}, {opt_kernver}, {opt_machine}: {state}")
            else:
                print(f"{pkgname} {version} {opt_kernver} {opt_machine} {state}")

def main():
    global opt_confpath, opt_kernver, opt_pkgconf, opt_quiet
    global opt_depmod, opt_machine, opt_jobs, opt_comp, opt_statedir, opt_destdir
    global use_colors, opt_stripcmd, opt_makeargs, opt_makeenv, opt_initramfs
    global opt_depmodh

    parser = argparse.ArgumentParser(
        description = "Chimera Kernel Module System"
    )
    # optional args
    parser.add_argument(
        "-C", "--config", default = opt_confpath,
        help = f"Path to CKMS configuration file (default: {opt_confpath})."
    )
    parser.add_argument(
        "-k", "--kernver", default = None,
        help = "Kernel version to use (default: current kernel)."
    )
    parser.add_argument(
        "-c", "--pkgconf", default = None,
        help = "Package config file to use (default: use stored)",
    )
    parser.add_argument(
        "-x", "--compression", default = None,
        help = "Compression method for modules (gz, xz or zst)"
    )
    parser.add_argument(
        "-q", "--quiet", action = "store_const", const = True,
        default = opt_quiet, help = "Do not log build output to stdout."
    )
    parser.add_argument(
        "-D", "--no-depmod", action = "store_const", const = True,
        default = not opt_depmod, help = "Do not run depmod after install."
    )
    parser.add_argument(
        "-j", "--jobs", default = None,
        help = "Number of build jobs (default: number of CPUs)"
    )
    parser.add_argument(
        "-s", "--statedir", default = None,
        help = "The CKMS state directory (default: /var/lib/ckms)"
    )
    parser.add_argument(
        "-d", "--destdir", default = None,
        help = f"Destination root for kernel modules (default: {opt_destdir})"
    )
    parser.add_argument(
        "-L", "--no-color", action = "store_const", const = True,
        default = False, help = "Force plain output."
    )
    # positional args
    parser.add_argument(
        "command", nargs = "+",
        help = "The command to issue, followed by its argument(s)."
    )

    cmdline = parser.parse_args()

    gcfg = configparser.ConfigParser(default_section = "ckms")
    gcfg.read(cmdline.config)

    ckcfg = gcfg["ckms"]

    opt_statedir = pathlib.Path(ckcfg.get("statedir", fallback = opt_statedir))
    opt_destdir = pathlib.Path(ckcfg.get("destdir", fallback = opt_destdir))
    opt_quiet = ckcfg.getboolean("quiet", fallback = False)
    opt_stripcmd = ckcfg.get("strip", fallback = opt_stripcmd)
    opt_makeargs = ckcfg.get("make_build_args", fallback = opt_makeargs)
    opt_initramfs = ckcfg.get("initramfs_hook", fallback = opt_initramfs)
    opt_depmodh = ckcfg.get("depmod_hook", fallback = opt_depmodh)
    if "build_env" in gcfg:
        opt_makeenv = gcfg["build_env"]

    # TODO read the cfg

    # command line args override everything

    if cmdline.kernver:
        opt_kernver = cmdline.kernver

    if cmdline.pkgconf:
        opt_pkgconf = cmdline.pkgconf

    if cmdline.quiet:
        opt_quiet = True

    if cmdline.no_depmod:
        opt_depmod = False

    if cmdline.destdir:
        opt_destdir = pathlib.Path(cmdline.destdir)

    if cmdline.statedir:
        opt_statedir = pathlib.Path(cmdline.statedir)

    if cmdline.jobs:
        opt_jobs = int(cmdline.jobs)

    if cmdline.compression:
        opt_comp = cmdline.compression

    # some reasonable defaults

    if not opt_jobs:
        opt_jobs = os.cpu_count()
    if not opt_jobs:
        opt_jobs = 1

    if not opt_kernver:
        opt_kernver = os.uname().release

    if not opt_machine:
        opt_machine = os.uname().machine

    if "NO_COLOR" in os.environ or not sys.stdout.isatty() or cmdline.no_color:
        use_colors = False

    if not opt_statedir.is_dir():
        log_red(f"ERROR: state directory '{opt_statedir}' does not exist")
        return 1

    comps = {
        "gz": True,
        "xz": True,
        "zst": True,
    }
    if opt_comp and opt_comp not in comps:
        log_red(f"ERROR: invalid compression method {opt_comp}")
        return 1

    # match the action

    try:
        action = cmdline.command[0]
        if action == "add":
            # add a package into the system
            do_add(cmdline.command)
        elif action == "remove":
            # remove a package from the system
            do_remove(cmdline.command)
        elif action == "install":
            # install a package for the given kernel
            do_install(cmdline.command)
        elif action == "uninstall":
            # uninstall a package from the given kernel
            do_uninstall(cmdline.command)
        elif action == "build":
            # build a package for the given kernel
            do_build(cmdline.command)
        elif action == "clean":
            # clean a package build for the given kernel
            do_clean(cmdline.command)
        elif action == "status":
            # print a package status for the given kernel
            do_status(cmdline.command)
        elif action == "plain-status":
            # like status, but shell-parseable
            do_status(cmdline.command, False)
        else:
            sys.stderr.write(
                f"Unknown action given: {cmdline.command[0]}\n"
            )
            return 1
    except CkmsError as e:
        log_red(f"ERROR: {e}")
        return 1
    except Exception:
        log_red(f"ERROR: internal error")
        traceback.print_exc()
        return 1

    return 0

sys.exit(main())

